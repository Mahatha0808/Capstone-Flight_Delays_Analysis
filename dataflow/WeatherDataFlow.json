{
	"name": "WeatherDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Date as string,",
				"          AirportCode as string,",
				"          Temperature as string,",
				"          WindSpeed as string,",
				"          Visibility as string,",
				"          WeatherCondition as string,",
				"          Precipitation as string,",
				"          Humidity as string,",
				"          Pressure as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('fixed', 2,",
				"          ERROR_FUNCTION('')",
				"     )) ~> source1",
				"source1 cast(output(",
				"          Date as date,",
				"          AirportCode as string,",
				"          Temperature as float,",
				"          WindSpeed as float,",
				"          Visibility as float,",
				"          WeatherCondition as string,",
				"          Precipitation as float,",
				"          Humidity as float,",
				"          Pressure as float",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 filter(!isNull(Temperature) && !isNull(WindSpeed) && !isNull(Visibility) && ",
				"!isNull(WeatherCondition) && !isNull(Precipitation) && !isNull(Humidity) && !isNull(Pressure)) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}